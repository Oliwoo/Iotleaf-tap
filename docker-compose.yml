services:

# -- DATA INGESTION -- #
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    hostname: mosquitto
    restart: unless-stopped
    networks:
      - iotleaf-network
    ports:
      - "${MOSQUITTO_MQTT_PORT}:1883"
      - "${MOSQUITTO_WEBSOCKET_PORT}:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log

  zookeeper:
    container_name: zookeeper
    networks:
      - iotleaf-network
    image: bitnami/zookeeper:latest
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    volumes:
      - ./zookeeper/persistence:/bitnami/zookeeper

  kafka:
    container_name: kafka
    networks:
      - iotleaf-network
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper
    restart: always
    ports:
      - ${KAFKA_PORT}:9092
      - 29092:29092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/persistence:/bitnami/kafka

  init-kafka:
    image: bitnami/kafka:latest
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating Report topic'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic report --replication-factor 1 --partitions 1

      echo -e 'Creating Registration topic'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic registration --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  mqtt-bridge:
    container_name: mqtt-bridge
    networks:
      - iotleaf-network
    image: marmaechler/mqtt2kafkabridge:latest
    depends_on:
      - kafka
      - mosquitto
    restart: always
    environment:
      KAFKA_BROKER_HOST: kafka:9092
      MQTT_BROKER_HOST: mosquitto:1883
    volumes:
      - ./mqtt2kafkabridge/logs:/opt/mqtt2kafkabridge/logs

  kafka-ui:
    container_name: kafka-ui
    networks:
      - iotleaf-network
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:8080
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=PLAINTEXT://kafka:9092

# -- DATA PROCESSING -- #
  springboot:
    build:
      context: web/.
    container_name: springboot
    networks:
      - iotleaf-network
    ports:
      - "${SPRING_SERVER_PORT}:8080"
    depends_on:
      - mysql
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads

# -- DATA VISUALIZATION -- #
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - iotleaf-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"

  grafana: 
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - iotleaf-network
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      
# -- DATABASE -- #
  mysql:
    image: mysql:8.0
    container_name: mysql
    networks:
      - iotleaf-network
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: iotleaf
      MYSQL_USER: ${SPRING_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql

# -- NETWORK -- #
networks:
  iotleaf-network:
    driver: bridge

# -- VOLUMES -- #
volumes:
  db_data:
  grafana:
  kafka:
  zookeeper:
  springboot:
  